0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/agiammarchi/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
12 verbose folder .
13 info prepublish eddy@0.5.8
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/agiammarchi/.npm/1f1177db-tar.lock
16 silly lockFile 68bf4a79-19628-0-5574398646131158-tmp-tgz tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
17 verbose lock tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz /Users/agiammarchi/.npm/68bf4a79-19628-0-5574398646131158-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 68bf4a79-19628-0-5574398646131158-tmp-tgz tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
21 silly lockFile 68bf4a79-19628-0-5574398646131158-tmp-tgz tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
22 verbose tar unpack /var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
23 silly lockFile 587f9da0-19628-0-5574398646131158-package tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
24 verbose lock tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package /Users/agiammarchi/.npm/587f9da0-19628-0-5574398646131158-package.lock
25 silly lockFile 68bf4a79-19628-0-5574398646131158-tmp-tgz tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
26 verbose lock tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz /Users/agiammarchi/.npm/68bf4a79-19628-0-5574398646131158-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry testrhino.js
32 silly gunzTarPerm extractEntry LICENSE.txt
33 silly gunzTarPerm extractEntry .TO_LOCALE.md
34 silly gunzTarPerm extractEntry benchmark/eddy.js
35 silly gunzTarPerm extractEntry benchmark/score.json
36 silly gunzTarPerm extractEntry bower.json
37 silly gunzTarPerm extractEntry build/dom4.js
38 silly gunzTarPerm extractEntry build/eddy.amd.max.js
39 silly gunzTarPerm extractEntry build/eddy.dom.js
40 silly gunzTarPerm extractEntry build/eddy.dom.max.js
41 silly gunzTarPerm extractEntry build/eddy.js
42 silly gunzTarPerm extractEntry build/eddy.max.js
43 silly gunzTarPerm extractEntry build/eddy.node.js
44 silly gunzTarPerm extractEntry build/ie8.js
45 silly gunzTarPerm extractEntry .gitmodules
46 silly gunzTarPerm extractEntry ie8/package.json
47 silly gunzTarPerm extractEntry ie8/.npmignore
48 silly gunzTarPerm extractEntry ie8/README.md
49 silly gunzTarPerm extractEntry ie8/bench.html
50 silly gunzTarPerm extractEntry ie8/bower.json
51 silly gunzTarPerm extractEntry ie8/.travis.yml
52 silly gunzTarPerm extractEntry ie8/component.json
53 silly gunzTarPerm extractEntry ie8/LICENSE.txt
54 silly gunzTarPerm extractEntry ie8/build/ie8.js
55 silly gunzTarPerm extractEntry ie8/build/ie8.max.js
56 silly gunzTarPerm extractEntry node-eddy.sh
57 silly gunzTarPerm extractEntry .travis.yml
58 silly gunzTarPerm extractEntry dom4/package.json
59 silly gunzTarPerm extractEntry dom4/.npmignore
60 silly gunzTarPerm extractEntry dom4/README.md
61 silly gunzTarPerm extractEntry dom4/.gitmodules
62 silly gunzTarPerm extractEntry dom4/LICENSE.txt
63 silly gunzTarPerm extractEntry dom4/build/dom4.js
64 silly gunzTarPerm extractEntry dom4/build/dom4.max.js
65 silly gunzTarPerm extractEntry dom4/build/ie8.js
66 silly lockFile 587f9da0-19628-0-5574398646131158-package tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
67 silly lockFile 587f9da0-19628-0-5574398646131158-package tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
68 silly lockFile 68bf4a79-19628-0-5574398646131158-tmp-tgz tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
69 silly lockFile 68bf4a79-19628-0-5574398646131158-tmp-tgz tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/tmp.tgz
70 verbose tar pack [ '/Users/agiammarchi/.npm/eddy/0.5.8/package.tgz',
70 verbose tar pack   '/var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package' ]
71 verbose tarball /Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
72 verbose folder /var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
73 silly lockFile 587f9da0-19628-0-5574398646131158-package tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
74 verbose lock tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package /Users/agiammarchi/.npm/587f9da0-19628-0-5574398646131158-package.lock
75 silly lockFile f950e70c-archi-npm-eddy-0-5-8-package-tgz tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
76 verbose lock tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz /Users/agiammarchi/.npm/f950e70c-archi-npm-eddy-0-5-8-package-tgz.lock
77 silly lockFile 587f9da0-19628-0-5574398646131158-package tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
78 silly lockFile 587f9da0-19628-0-5574398646131158-package tar:///var/folders/kw/rrsdjj410_qgvljk46ygb4900000gn/T/npm-13896-UqXGByIb/1397402619628-0.5574398646131158/package
79 silly lockFile f950e70c-archi-npm-eddy-0-5-8-package-tgz tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
80 silly lockFile f950e70c-archi-npm-eddy-0-5-8-package-tgz tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
81 silly lockFile 2b3da5fa-iammarchi-npm-eddy-0-5-8-package /Users/agiammarchi/.npm/eddy/0.5.8/package
82 verbose lock /Users/agiammarchi/.npm/eddy/0.5.8/package /Users/agiammarchi/.npm/2b3da5fa-iammarchi-npm-eddy-0-5-8-package.lock
83 silly lockFile 2b3da5fa-iammarchi-npm-eddy-0-5-8-package /Users/agiammarchi/.npm/eddy/0.5.8/package
84 silly lockFile 2b3da5fa-iammarchi-npm-eddy-0-5-8-package /Users/agiammarchi/.npm/eddy/0.5.8/package
85 verbose tar unpack /Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
86 silly lockFile d2c66cf8-iammarchi-npm-eddy-0-5-8-package tar:///Users/agiammarchi/.npm/eddy/0.5.8/package
87 verbose lock tar:///Users/agiammarchi/.npm/eddy/0.5.8/package /Users/agiammarchi/.npm/d2c66cf8-iammarchi-npm-eddy-0-5-8-package.lock
88 silly lockFile f950e70c-archi-npm-eddy-0-5-8-package-tgz tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
89 verbose lock tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz /Users/agiammarchi/.npm/f950e70c-archi-npm-eddy-0-5-8-package-tgz.lock
90 silly gunzTarPerm modes [ '755', '644' ]
91 silly gunzTarPerm extractEntry package.json
92 silly gunzTarPerm extractEntry .npmignore
93 silly gunzTarPerm extractEntry README.md
94 silly gunzTarPerm extractEntry testrhino.js
95 silly gunzTarPerm extractEntry LICENSE.txt
96 silly gunzTarPerm extractEntry .TO_LOCALE.md
97 silly gunzTarPerm extractEntry benchmark/eddy.js
98 silly gunzTarPerm extractEntry benchmark/score.json
99 silly gunzTarPerm extractEntry .gitmodules
100 silly gunzTarPerm extractEntry build/dom4.js
101 silly gunzTarPerm extractEntry build/eddy.amd.max.js
102 silly gunzTarPerm extractEntry build/eddy.dom.js
103 silly gunzTarPerm extractEntry build/eddy.dom.max.js
104 silly gunzTarPerm extractEntry build/eddy.js
105 silly gunzTarPerm extractEntry build/eddy.max.js
106 silly gunzTarPerm extractEntry build/eddy.node.js
107 silly gunzTarPerm extractEntry build/ie8.js
108 silly gunzTarPerm extractEntry dom4/package.json
109 silly gunzTarPerm extractEntry dom4/.npmignore
110 silly gunzTarPerm extractEntry dom4/README.md
111 silly gunzTarPerm extractEntry dom4/.gitmodules
112 silly gunzTarPerm extractEntry dom4/LICENSE.txt
113 silly gunzTarPerm extractEntry dom4/build/dom4.js
114 silly gunzTarPerm extractEntry dom4/build/dom4.max.js
115 silly gunzTarPerm extractEntry dom4/build/ie8.js
116 silly gunzTarPerm extractEntry ie8/package.json
117 silly gunzTarPerm extractEntry ie8/.npmignore
118 silly gunzTarPerm extractEntry ie8/README.md
119 silly gunzTarPerm extractEntry ie8/.travis.yml
120 silly gunzTarPerm extractEntry ie8/LICENSE.txt
121 silly gunzTarPerm extractEntry ie8/bench.html
122 silly gunzTarPerm extractEntry ie8/bower.json
123 silly gunzTarPerm extractEntry ie8/build/ie8.js
124 silly gunzTarPerm extractEntry ie8/build/ie8.max.js
125 silly gunzTarPerm extractEntry ie8/component.json
126 silly gunzTarPerm extractEntry node-eddy.sh
127 silly gunzTarPerm extractEntry .travis.yml
128 silly gunzTarPerm extractEntry bower.json
129 silly lockFile d2c66cf8-iammarchi-npm-eddy-0-5-8-package tar:///Users/agiammarchi/.npm/eddy/0.5.8/package
130 silly lockFile d2c66cf8-iammarchi-npm-eddy-0-5-8-package tar:///Users/agiammarchi/.npm/eddy/0.5.8/package
131 silly lockFile f950e70c-archi-npm-eddy-0-5-8-package-tgz tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
132 silly lockFile f950e70c-archi-npm-eddy-0-5-8-package-tgz tar:///Users/agiammarchi/.npm/eddy/0.5.8/package.tgz
133 verbose chmod /Users/agiammarchi/.npm/eddy/0.5.8/package.tgz 644
134 verbose chown /Users/agiammarchi/.npm/eddy/0.5.8/package.tgz [ 501, 20 ]
135 silly lockFile 3a52ce78- .
136 silly lockFile 3a52ce78- .
137 silly publish { version: '0.5.8',
137 silly publish   name: 'eddy',
137 silly publish   description: 'Event Driven JS',
137 silly publish   homepage: 'https://github.com/WebReflection/eddy',
137 silly publish   keywords:
137 silly publish    [ 'event',
137 silly publish      'driven',
137 silly publish      'standard',
137 silly publish      'ES3',
137 silly publish      'ES5',
137 silly publish      'ES6',
137 silly publish      'node',
137 silly publish      'rhino',
137 silly publish      'browser',
137 silly publish      'IE' ],
137 silly publish   author:
137 silly publish    { name: 'Andrea Giammarchi',
137 silly publish      url: 'http://webreflection.blogspot.com/' },
137 silly publish   repository: { type: 'git', url: 'git://github.com/WebReflection/eddy.git' },
137 silly publish   main: './build/eddy.node.js',
137 silly publish   scripts: { test: 'node test/.test.js' },
137 silly publish   readme: 'Event Driven JS\n===============\n\na not so obtrusive and *highly optimized* attempt to make JavaScript more awesome than ever!\n\n[![build status](https://secure.travis-ci.org/WebReflection/eddy.png)](http://travis-ci.org/WebReflection/eddy)\n\n[![NPM](https://nodei.co/npm/eddy.png?downloads=true)](https://nodei.co/npm/eddy/)\n\n### The eddy.js Philosophy\nIt does not matter if you code client or server side, we all need the same thing and we keep using this or that library to obtain the same behavior.\n\nI am talking about all *de-facto standards API* such `.on(type, handler)`, `.once(type, handler)`, `.off(type, handler)` together with `.emit(type, arg1, argN)` and `.listeners(type)` or `.trigger(type, detail)` to deal with DOM nodes.\n\n`eddy.js` aim is to harmonize all these API at core level polluting in a **non enumerable** way the `Object.prototype` in a smart way that simply works!\n\nThis means no worries at all for any `for/in` loop you might have in there, even in IE.\n\nAs summary, [this is the philosophy behind this module](https://twitter.com/WebReflection/status/354958592601899008)\n\n> eddy.js is a very pragmatic approach, back those days where developers enriched native prototypes to do more with less code ;-)\n\n\n### Compatibility\n\n`eddy.js` is tested and compatible with the following **mobile platforms**\n\n  * iOS 5, 6, 7+\n  * Android 2.2+, 3, 4.0, 4.1, 4.2, 4.3+\n  * Windows Phone 7, 8+\n  * FirefoxOS 0.X, 1+\n  * Blackberry 10 (probably older too, haven\'t tested yet)\n  * Opera Mini, Opera Mobile, and Opera Mobile Beta\n  * webOS 2+\n  * Nokia Asha and Nokia Xpress browser\n  * UC Browser for Android 2.X or higher\n\neddy is also compatible with the following **desktop browsers**\n\n  * Chrome, Canary, and Chromium channel\n  * Safari 5+ and Webkit Nightly\n  * Internet Explorer 8, 9, 10, 11+\n  * Firefox, Aurora, and Nightly channel\n  * Opera\n\nIn order to verify your browser too please [visit the test page](http://webreflection.github.io/eddy/test/).\n\nLast, but not least, `eddy.js` has been used and tested in the following **server side** platforms\n\n  * node.js\n  * rhino\n\nIf you clone the repo, just `make test` for node or be sure you have a stable rhino jar and `java -jar /path/to/that/jar/js.jar testrhino.js`.\n\n\n### Object.prototype Enriched API\nHere a list of methods you can use by default in an `eddy.js` environment.\n\n\n#### Object#on(type, handler[, capture])\nReturns the object itself after adding an event handler.\nThis is basically the equivalent of `addListener` or `addEventListener`, where duplicated handlers for the same event are not allowed.\n```javascript\nvar stopWatch = {\n  startTime: Date.now()\n}.on(\n  \'change\',\n  function () {\n    // log elapsed time per each change\n    console.log(Date.now() - this.startTime);\n  }\n);\n\nsetInterval(function () {\n  stopWatch.emit(\'change\');\n}, 10);\n\n// or using the boundTo method\n// and the extra arguments accepted by setInterval\nsetInterval(stopWatch.boundTo(\'emit\'), 10, \'change\');\n```\nThe `handler` can be either a function or an object as it is for `DOM` methods such `addEventListener` or `removeEventListener`.\nIn this case the method `handleEvent` is invoked with the object itself as context as it is for the [native DOM behavior](http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener).\n\nThe third boolean `capture` argument is useless with JS objects but might be used in some `DOM` specific case.\nBy default, `capture` is false.\n\n\n#### Object#once(type, handler[, capture])\nSame as `Object#on(type, handler[, capture])` except the event is triggered once and never again unless specified later on.\n```javascript\n// on a generic HTML page inside a script tag...\nthis.once(\'load\', function(e) {\n  console.log(\'page fully loaded\');\n  // even if triggered manually\n  // this event won\'t fire anymore\n  this.fire(\'load\');\n  // nothing happened\n});\n```\n\n\n#### Object#off(type, handler[, capture])\nReturns the object itself after removing an event handler, if present.\nThis is basically the equivalent of `removeListener` or `removeEventListener`.\n```javascript\nfunction clearAllEntries() {\n  database.clear();\n}\nwindow.on(\'unload\', clearAllEntries);\nkeepEntriesButton.on(\'click\', function () {\n  // drop the clear procedure\n  window.off(\'unload\', clearAllEntries);\n});\n```\n\n\n#### Object#trigger(type[, detail])\nTriggers / fires all handlers associated to the event `type` enriching the event with arbitrary `detail` simulating what `CustomEvent` does in DOM Level 4 specifications.\n\nThis method is more suitable for DOM events or those events based on a single argument parameter/object.\n```javascript\nwindow.onresize = function (e) {\n  alert(e.detail); // object {any:\'detail\'}\n};\nwindow.trigger(\'resize\', {any:\'detail\'});\n```\nIn the DOM world, it is possible to use directly `.trigger(new CustomEvent(type, {cancelable:true, bubbles: true, detail: anyData}))`.\n\nThis method will return `false` if any listener called `event.preventDefault()` since by default all triggered events will be cancelable.\n\n\n#### Object#emit(type[, arg1][, argN])\nThis method [behaves like node.js](http://nodejs.org/api/events.html#events_emitter_emit_event_arg1_arg2) one, accepting one or more optional arguments after the type.\n```javascript\nvar object = {}\n  .on(\'modify\', function (key, value) {\n    this[key] = value;\n  })\n  .on(\'delete\', function (key) {\n    delete this[key];\n  })\n;\nobject.emit(\'modify\', \'key\', Math.random());\nconsole.log(object.key); // 0.3245979759376496\nobject.emit(\'delete\', \'key\');\nconsole.log(object.key); // undefined\n```\n\nIn the DOM world this method will dispatch an event with specified type and an `arguments` property for interoperability purpose. Such property will contain optional extra arguments used to `.emit(type, a1, aN)` in first place.\n\n\n#### Object#listeners(type)\nThis method [behaves like node.js](http://nodejs.org/api/events.html#events_emitter_listeners_event) one but on DOM object it will always return an empty array-like object.\n\n```javascript\nfunction handler() {}\nvar obj = {}.on(\'event\', handler);\nvar listeners = obj.listeners(\'event\');\n\nconsole.log(listeners[0] === handler); // true\n```\nIn the DOM world there\'s no way to retrieve back nodes and it has never been a real problem but for _node.js_ or generic _JS business logic_ the possibility to understand already added listeners might be handy (I needed this in [dblite](https://github.com/WebReflection/dblite#dblite) and I\'ve realized it is a very handy method!)\n\n\n#### Object#boundTo(method)\nThis method creates a single bound version of the generic function or instance method.\n```javascript\nvar obj = {\n  test: function () {\n    console.log(this === obj);\n  }\n};\nconsole.log(\n  obj.boundTo(\'test\') === obj.boundTo(\'test\')\n); // true\nobj.boundTo(\'test\')(); // true\n```\nIf the argument is *a function instead of a string* that function is used instead.\n```javascript\nfunction test() {\n  console.log(this === obj);\n}\nvar obj = {};\nconsole.log(\n  obj.boundTo(test) === obj.boundTo(test)\n); // true\nobj.boundTo(test)(); // true\n```\nSame thing if we pass the method itself as function instead of method name:\n```javascript\nvar obj = {\n  test: function () {\n    console.log(this === obj);\n  }\n};\nconsole.log(\n  obj.boundTo(obj.test) === obj.boundTo(\'test\')\n); // true\n```\n\n\n#### since version 0.5.2\nThe `boundTo` method now is able to set, if not already present, a method to a generic object.\n```javascript\nvar fn = function(){return this};\nobj.boundTo(\'test\', fn) === obj.boundTo(\'test\', function(){})\nobj.boundTo(\'test\', fn)() === obj\nobj.test === fn\n```\nThis can be very useful for runtime, in scope, function addressing as example for DOM handlers.\n\n\n\n#### Object#when(type, handler)\nThis method simply provides a way to retrieve some data the very first time it has been triggered.\n\nPlease note this is not an equivalent to [Promises/A+](http://promises-aplus.github.io/promises-spec/), the one implemented in next version of JavaScript, neither [when](https://github.com/cujojs/when#whenjs) library, this is just meant to simplify few common cases in an Event_ish_ way.\n```javascript\n// async, who knows if and when it will happen\n// will be asked only once in any case (not a watchPosition)\nnavigator.geolocation.getCurrentPosition(\n  function(info) {\n    myApp.emit(\'geocurrentposition\', null, info);\n  },\n  function(err) {\n    myApp.emit(\'geocurrentposition\', err || \'unknown\', null);\n  }\n);\n\n\n// wait to retrieve initial position\nmyApp.when(\'geocurrentposition\', function(err, pos) {\n  if (err) {\n    console.error(\'\' + err);\n  } else {\n    console.log(pos.coords);\n  }\n});\n\n// any other object could listen even if resolved\n// it wan\'t ask again for the position\n```\nAbove example could be extended to database access request or any other classic user operation that should not be asked more than once, decoupling different requests independently.\n\n#### document.when("ready", callback)\nThis is a very special case featured directly in core.\nInspired by the most famous `$(document).ready(callback)` behavior, `document.when("ready", callback)` acts exactly the same way.\n\nIf you load `eddy.dom.js` lazily, this should work in any case even after the `DOMContentLoaded` and for all supported browsers.\n\n```javascript\n// even if lazily loaded\ndocument.when(\'ready\', function(e){\n  console.log(\'we are ready to go\');\n});\n\n// later, even loaded asynchronously and without AMD\ndocument.when(\'ready\', initLibrary);\n```\n\nThis will ensure that the event will be available whenever a script will ask to listen for the `ready` event.\n\nPlease note that if the document is already ready, this will be fired asynchronously and ASAP but never inline.\n\n\n### DOM Only\nIn order to make life easier on DOM world too, there are few extra methods on top of regular `eddy` stuff, including same behavior for `XMLHttpRequest`.\n\n#### DOM#data(key[, value])\nThis method is a normalizer for the `dataset` magic attributes behavior with one exception: you can simply assign `null` or `undefined` to remove the attribute when and if not needed anymore.\n```javascript\nvar div = document.createElement(\'div\');\ndiv.data(\'key\', \'value\');\ndiv.hasAttribute(\'data-key\'); // true\ndiv.data(\'key\'); // \'value\'\ndiv.data(\'key\', null);\ndiv.hasAttribute(\'data-key\'); // false\n```\n\n\n### Array.prototype Enriched API\nNew in version `0.3`, all `Array.prototype` methods but `boundTo` and `listeners` have been made smart enough to perform the same call inside each item of the array.\n\nThis approach simplifies a very common pattern with collections, specially in the DOM world, so that we can add or remove events to many objects at once.\n\n```javascript\nfunction query(CSS, parentNode) {\n  return Array.prototype.slice.call(\n    (parentNode || document).querySelectorAll(CSS)\n  );\n}\n\n// later on ...\nquery(\'ul > li\').on(\'click\', doStuff);\n```\nThe assumption is that collections are commonly used like that.\n\n\n### Which File ?\n`eddy.js` comes in different flavors but it operates on global, native, constructors.\nThis means once you require or include or load `eddy.js` you need to manually `delete` polluted prototypes if needed.\nAnyway, here the list of files you need:\n\n * [browser without DOM](build/eddy.js), for *browsers* meaning down to IE6 baby, fear not!\n * [browser with DOM](build/eddy.dom.js), for *browsers* meaning IE8, using [ie8 file](https://github.com/WebReflection/ie8#ie8) plus all modern mobile and desktop browsers. In order to have an almost fully standard and updated DOM environment, please add [dom4](https://github.com/WebReflection/dom4#dom4) after `ie8` as done as example in the [test page](http://webreflection.github.io/eddy/test/).\n * [AMD including DOM](build/eddy.amd.js), same as `eddy.dom.js` inside the require AMD logic. Both `ie8` and `dom4` are strongly suggested here too.\n * [node.js](build/eddy.node.js), meaning node.js and other server side engines since no export is used/needed\n\nYou can install `eddy.js` directly via `npm install eddy` too and simply use `require(\'eddy\')`.\nThe version for node should work for Rhino too without problems ;-)\n\n\n### Why Eddy As Name ?\nNot only because of the " *Event Driven* sound check ", the definition I prefer is the following one:\n\n> a current or trend, as of opinion or events, running counter to the main current.\n\nbut [all other definitions](http://dictionary.reference.com/browse/eddy) are somehow very metaphoric too ;-)\n\n\n### Not Your Meal ?\nIf you are stuck in late 90s dogmas about JS and forbidden `Object.prototype` pollution, you can always go for [EventTarget](https://github.com/WebReflection/event-target#event-target) mixin and use that with all your classes.\n\nWhat `eddy.js` gives you here, is the ability to forget all these problems and use emitters when you need them, if you need them, as easy as that.',
137 silly publish   readmeFilename: 'README.md',
137 silly publish   bugs: { url: 'https://github.com/WebReflection/eddy/issues' },
137 silly publish   _id: 'eddy@0.5.8',
137 silly publish   dist: { shasum: '7fd379ebf19b964a5588d37e0523f8f82b07f3ef' },
137 silly publish   _from: '.' }
138 verbose url raw eddy
139 verbose url resolving [ 'https://registry.npmjs.org/', './eddy' ]
140 verbose url resolved https://registry.npmjs.org/eddy
141 info trying registry request attempt 1 at 08:23:39
142 http PUT https://registry.npmjs.org/eddy
143 http 403 https://registry.npmjs.org/eddy
144 error publish Failed PUT 403
145 error Error: forbidden cannot modify pre-existing version: 0.5.8
145 error old={"version":"0.5.8","name":"eddy","description":"Event Driven JS","homepage":"https://github.com/WebReflection/eddy","keywords":["event","driven","standard","ES3","ES5","ES6","node","rhino","browser","IE"],"author":{"name":"Andrea Giammarchi","url":"http://webreflection.blogspot.com/"},"repository":{"type":"git","url":"git://github.com/WebReflection/eddy.git"},"main":"./build/eddy.node.js","scripts":{"test":"node test/.test.js"},"bugs":{"url":"https://github.com/WebReflection/eddy/issues"},"_id":"eddy@0.5.8","dist":{"shasum":"44bb2afe55ad84fe9aee3e5bee6cf24cd399f67a","tarball":"http://registry.npmjs.org/eddy/-/eddy-0.5.8.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"webreflection","email":"andrea.giammarchi@gmail.com"},"maintainers":[{"name":"webreflection","email":"andrea.giammarchi@gmail.com"}]}
145 error new={"version":"0.5.8","name":"eddy","description":"Event Driven JS","homepage":"https://github.com/WebReflection/eddy","keywords":["event","driven","standard","ES3","ES5","ES6","node","rhino","browser","IE"],"author":{"name":"Andrea Giammarchi","url":"http://webreflection.blogspot.com/"},"repository":{"type":"git","url":"git://github.com/WebReflection/eddy.git"},"main":"./build/eddy.node.js","scripts":{"test":"node test/.test.js"},"readme":"Event Driven JS\u000a===============\u000a\u000aa not so obtrusive and *highly optimized* attempt to make JavaScript more awesome than ever!\u000a\u000a[![build status](https://secure.travis-ci.org/WebReflection/eddy.png)](http://travis-ci.org/WebReflection/eddy)\u000a\u000a[![NPM](https://nodei.co/npm/eddy.png?downloads=true)](https://nodei.co/npm/eddy/)\u000a\u000a### The eddy.js Philosophy\u000aIt does not matter if you code client or server side, we all need the same thing and we keep using this or that library to obtain the same behavior.\u000a\u000aI am talking about all *de-facto standards API* such `.on(type, handler)`, `.once(type, handler)`, `.off(type, handler)` together with `.emit(type, arg1, argN)` and `.listeners(type)` or `.trigger(type, detail)` to deal with DOM nodes.\u000a\u000a`eddy.js` aim is to harmonize all these API at core level polluting in a **non enumerable** way the `Object.prototype` in a smart way that simply works!\u000a\u000aThis means no worries at all for any `for/in` loop you might have in there, even in IE.\u000a\u000aAs summary, [this is the philosophy behind this module](https://twitter.com/WebReflection/status/354958592601899008)\u000a\u000a> eddy.js is a very pragmatic approach, back those days where developers enriched native prototypes to do more with less code ;-)\u000a\u000a\u000a### Compatibility\u000a\u000a`eddy.js` is tested and compatible with the following **mobile platforms**\u000a\u000a  * iOS 5, 6, 7+\u000a  * Android 2.2+, 3, 4.0, 4.1, 4.2, 4.3+\u000a  * Windows Phone 7, 8+\u000a  * FirefoxOS 0.X, 1+\u000a  * Blackberry 10 (probably older too, haven't tested yet)\u000a  * Opera Mini, Opera Mobile, and Opera Mobile Beta\u000a  * webOS 2+\u000a  * Nokia Asha and Nokia Xpress browser\u000a  * UC Browser for Android 2.X or higher\u000a\u000aeddy is also compatible with the following **desktop browsers**\u000a\u000a  * Chrome, Canary, and Chromium channel\u000a  * Safari 5+ and Webkit Nightly\u000a  * Internet Explorer 8, 9, 10, 11+\u000a  * Firefox, Aurora, and Nightly channel\u000a  * Opera\u000a\u000aIn order to verify your browser too please [visit the test page](http://webreflection.github.io/eddy/test/).\u000a\u000aLast, but not least, `eddy.js` has been used and tested in the following **server side** platforms\u000a\u000a  * node.js\u000a  * rhino\u000a\u000aIf you clone the repo, just `make test` for node or be sure you have a stable rhino jar and `java -jar /path/to/that/jar/js.jar testrhino.js`.\u000a\u000a\u000a### Object.prototype Enriched API\u000aHere a list of methods you can use by default in an `eddy.js` environment.\u000a\u000a\u000a#### Object#on(type, handler[, capture])\u000aReturns the object itself after adding an event handler.\u000aThis is basically the equivalent of `addListener` or `addEventListener`, where duplicated handlers for the same event are not allowed.\u000a```javascript\u000avar stopWatch = {\u000a  startTime: Date.now()\u000a}.on(\u000a  'change',\u000a  function () {\u000a    // log elapsed time per each change\u000a    console.log(Date.now() - this.startTime);\u000a  }\u000a);\u000a\u000asetInterval(function () {\u000a  stopWatch.emit('change');\u000a}, 10);\u000a\u000a// or using the boundTo method\u000a// and the extra arguments accepted by setInterval\u000asetInterval(stopWatch.boundTo('emit'), 10, 'change');\u000a```\u000aThe `handler` can be either a function or an object as it is for `DOM` methods such `addEventListener` or `removeEventListener`.\u000aIn this case the method `handleEvent` is invoked with the object itself as context as it is for the [native DOM behavior](http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener).\u000a\u000aThe third boolean `capture` argument is useless with JS objects but might be used in some `DOM` specific case.\u000aBy default, `capture` is false.\u000a\u000a\u000a#### Object#once(type, handler[, capture])\u000aSame as `Object#on(type, handler[, capture])` except the event is triggered once and never again unless specified later on.\u000a```javascript\u000a// on a generic HTML page inside a script tag...\u000athis.once('load', function(e) {\u000a  console.log('page fully loaded');\u000a  // even if triggered manually\u000a  // this event won't fire anymore\u000a  this.fire('load');\u000a  // nothing happened\u000a});\u000a```\u000a\u000a\u000a#### Object#off(type, handler[, capture])\u000aReturns the object itself after removing an event handler, if present.\u000aThis is basically the equivalent of `removeListener` or `removeEventListener`.\u000a```javascript\u000afunction clearAllEntries() {\u000a  database.clear();\u000a}\u000awindow.on('unload', clearAllEntries);\u000akeepEntriesButton.on('click', function () {\u000a  // drop the clear procedure\u000a  window.off('unload', clearAllEntries);\u000a});\u000a```\u000a\u000a\u000a#### Object#trigger(type[, detail])\u000aTriggers / fires all handlers associated to the event `type` enriching the event with arbitrary `detail` simulating what `CustomEvent` does in DOM Level 4 specifications.\u000a\u000aThis method is more suitable for DOM events or those events based on a single argument parameter/object.\u000a```javascript\u000awindow.onresize = function (e) {\u000a  alert(e.detail); // object {any:'detail'}\u000a};\u000awindow.trigger('resize', {any:'detail'});\u000a```\u000aIn the DOM world, it is possible to use directly `.trigger(new CustomEvent(type, {cancelable:true, bubbles: true, detail: anyData}))`.\u000a\u000aThis method will return `false` if any listener called `event.preventDefault()` since by default all triggered events will be cancelable.\u000a\u000a\u000a#### Object#emit(type[, arg1][, argN])\u000aThis method [behaves like node.js](http://nodejs.org/api/events.html#events_emitter_emit_event_arg1_arg2) one, accepting one or more optional arguments after the type.\u000a```javascript\u000avar object = {}\u000a  .on('modify', function (key, value) {\u000a    this[key] = value;\u000a  })\u000a  .on('delete', function (key) {\u000a    delete this[key];\u000a  })\u000a;\u000aobject.emit('modify', 'key', Math.random());\u000aconsole.log(object.key); // 0.3245979759376496\u000aobject.emit('delete', 'key');\u000aconsole.log(object.key); // undefined\u000a```\u000a\u000aIn the DOM world this method will dispatch an event with specified type and an `arguments` property for interoperability purpose. Such property will contain optional extra arguments used to `.emit(type, a1, aN)` in first place.\u000a\u000a\u000a#### Object#listeners(type)\u000aThis method [behaves like node.js](http://nodejs.org/api/events.html#events_emitter_listeners_event) one but on DOM object it will always return an empty array-like object.\u000a\u000a```javascript\u000afunction handler() {}\u000avar obj = {}.on('event', handler);\u000avar listeners = obj.listeners('event');\u000a\u000aconsole.log(listeners[0] === handler); // true\u000a```\u000aIn the DOM world there's no way to retrieve back nodes and it has never been a real problem but for _node.js_ or generic _JS business logic_ the possibility to understand already added listeners might be handy (I needed this in [dblite](https://github.com/WebReflection/dblite#dblite) and I've realized it is a very handy method!)\u000a\u000a\u000a#### Object#boundTo(method)\u000aThis method creates a single bound version of the generic function or instance method.\u000a```javascript\u000avar obj = {\u000a  test: function () {\u000a    console.log(this === obj);\u000a  }\u000a};\u000aconsole.log(\u000a  obj.boundTo('test') === obj.boundTo('test')\u000a); // true\u000aobj.boundTo('test')(); // true\u000a```\u000aIf the argument is *a function instead of a string* that function is used instead.\u000a```javascript\u000afunction test() {\u000a  console.log(this === obj);\u000a}\u000avar obj = {};\u000aconsole.log(\u000a  obj.boundTo(test) === obj.boundTo(test)\u000a); // true\u000aobj.boundTo(test)(); // true\u000a```\u000aSame thing if we pass the method itself as function instead of method name:\u000a```javascript\u000avar obj = {\u000a  test: function () {\u000a    console.log(this === obj);\u000a  }\u000a};\u000aconsole.log(\u000a  obj.boundTo(obj.test) === obj.boundTo('test')\u000a); // true\u000a```\u000a\u000a\u000a#### since version 0.5.2\u000aThe `boundTo` method now is able to set, if not already present, a method to a generic object.\u000a```javascript\u000avar fn = function(){return this};\u000aobj.boundTo('test', fn) === obj.boundTo('test', function(){})\u000aobj.boundTo('test', fn)() === obj\u000aobj.test === fn\u000a```\u000aThis can be very useful for runtime, in scope, function addressing as example for DOM handlers.\u000a\u000a\u000a\u000a#### Object#when(type, handler)\u000aThis method simply provides a way to retrieve some data the very first time it has been triggered.\u000a\u000aPlease note this is not an equivalent to [Promises/A+](http://promises-aplus.github.io/promises-spec/), the one implemented in next version of JavaScript, neither [when](https://github.com/cujojs/when#whenjs) library, this is just meant to simplify few common cases in an Event_ish_ way.\u000a```javascript\u000a// async, who knows if and when it will happen\u000a// will be asked only once in any case (not a watchPosition)\u000anavigator.geolocation.getCurrentPosition(\u000a  function(info) {\u000a    myApp.emit('geocurrentposition', null, info);\u000a  },\u000a  function(err) {\u000a    myApp.emit('geocurrentposition', err || 'unknown', null);\u000a  }\u000a);\u000a\u000a\u000a// wait to retrieve initial position\u000amyApp.when('geocurrentposition', function(err, pos) {\u000a  if (err) {\u000a    console.error('' + err);\u000a  } else {\u000a    console.log(pos.coords);\u000a  }\u000a});\u000a\u000a// any other object could listen even if resolved\u000a// it wan't ask again for the position\u000a```\u000aAbove example could be extended to database access request or any other classic user operation that should not be asked more than once, decoupling different requests independently.\u000a\u000a#### document.when(\"ready\", callback)\u000aThis is a very special case featured directly in core.\u000aInspired by the most famous `$(document).ready(callback)` behavior, `document.when(\"ready\", callback)` acts exactly the same way.\u000a\u000aIf you load `eddy.dom.js` lazily, this should work in any case even after the `DOMContentLoaded` and for all supported browsers.\u000a\u000a```javascript\u000a// even if lazily loaded\u000adocument.when('ready', function(e){\u000a  console.log('we are ready to go');\u000a});\u000a\u000a// later, even loaded asynchronously and without AMD\u000adocument.when('ready', initLibrary);\u000a```\u000a\u000aThis will ensure that the event will be available whenever a script will ask to listen for the `ready` event.\u000a\u000aPlease note that if the document is already ready, this will be fired asynchronously and ASAP but never inline.\u000a\u000a\u000a### DOM Only\u000aIn order to make life easier on DOM world too, there are few extra methods on top of regular `eddy` stuff, including same behavior for `XMLHttpRequest`.\u000a\u000a#### DOM#data(key[, value])\u000aThis method is a normalizer for the `dataset` magic attributes behavior with one exception: you can simply assign `null` or `undefined` to remove the attribute when and if not needed anymore.\u000a```javascript\u000avar div = document.createElement('div');\u000adiv.data('key', 'value');\u000adiv.hasAttribute('data-key'); // true\u000adiv.data('key'); // 'value'\u000adiv.data('key', null);\u000adiv.hasAttribute('data-key'); // false\u000a```\u000a\u000a\u000a### Array.prototype Enriched API\u000aNew in version `0.3`, all `Array.prototype` methods but `boundTo` and `listeners` have been made smart enough to perform the same call inside each item of the array.\u000a\u000aThis approach simplifies a very common pattern with collections, specially in the DOM world, so that we can add or remove events to many objects at once.\u000a\u000a```javascript\u000afunction query(CSS, parentNode) {\u000a  return Array.prototype.slice.call(\u000a    (parentNode || document).querySelectorAll(CSS)\u000a  );\u000a}\u000a\u000a// later on ...\u000aquery('ul > li').on('click', doStuff);\u000a```\u000aThe assumption is that collections are commonly used like that.\u000a\u000a\u000a### Which File ?\u000a`eddy.js` comes in different flavors but it operates on global, native, constructors.\u000aThis means once you require or include or load `eddy.js` you need to manually `delete` polluted prototypes if needed.\u000aAnyway, here the list of files you need:\u000a\u000a * [browser without DOM](build/eddy.js), for *browsers* meaning down to IE6 baby, fear not!\u000a * [browser with DOM](build/eddy.dom.js), for *browsers* meaning IE8, using [ie8 file](https://github.com/WebReflection/ie8#ie8) plus all modern mobile and desktop browsers. In order to have an almost fully standard and updated DOM environment, please add [dom4](https://github.com/WebReflection/dom4#dom4) after `ie8` as done as example in the [test page](http://webreflection.github.io/eddy/test/).\u000a * [AMD including DOM](build/eddy.amd.js), same as `eddy.dom.js` inside the require AMD logic. Both `ie8` and `dom4` are strongly suggested here too.\u000a * [node.js](build/eddy.node.js), meaning node.js and other server side engines since no export is used/needed\u000a\u000aYou can install `eddy.js` directly via `npm install eddy` too and simply use `require('eddy')`.\u000aThe version for node should work for Rhino too without problems ;-)\u000a\u000a\u000a### Why Eddy As Name ?\u000aNot only because of the \" *Event Driven* sound check \", the definition I prefer is the following one:\u000a\u000a> a current or trend, as of opinion or events, running counter to the main current.\u000a\u000abut [all other definitions](http://dictionary.reference.com/browse/eddy) are somehow very metaphoric too ;-)\u000a\u000a\u000a### Not Your Meal ?\u000aIf you are stuck in late 90s dogmas about JS and forbidden `Object.prototype` pollution, you can always go for [EventTarget](https://github.com/WebReflection/event-target#event-target) mixin and use that with all your classes.\u000a\u000aWhat `eddy.js` gives you here, is the ability to forget all these problems and use emitters when you need them, if you need them, as easy as that.","readmeFilename":"README.md","bugs":{"url":"https://github.com/WebReflection/eddy/issues"},"_id":"eddy@0.5.8","dist":{"shasum":"7fd379ebf19b964a5588d37e0523f8f82b07f3ef","tarball":"http://registry.npmjs.org/eddy/-/eddy-0.5.8.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"webreflection","email":"andrea.giammarchi@gmail.com"},"maintainers":[{"name":"webreflection","email":"andrea.giammarchi@gmail.com"}]}: eddy
145 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:237:14)
145 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
145 error     at Request.EventEmitter.emit (events.js:98:17)
145 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
145 error     at Request.EventEmitter.emit (events.js:117:20)
145 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
145 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
145 error     at _stream_readable.js:920:16
145 error     at process._tickCallback (node.js:415:13)
146 error If you need help, you may report this *entire* log,
146 error including the npm and node versions, at:
146 error     <http://github.com/npm/npm/issues>
147 error System Darwin 12.5.0
148 error command "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
149 error cwd /Users/agiammarchi/code/eddy
150 error node -v v0.10.26
151 error npm -v 1.4.3
152 verbose exit [ 1, true ]
